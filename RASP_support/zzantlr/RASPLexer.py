# Generated from RASP.g4 by ANTLR 4.9
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2=")
        buf.write("\u018b\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:")
        buf.write("\4;\t;\4<\t<\3\2\3\2\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3")
        buf.write("\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6")
        buf.write("\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3")
        buf.write("\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\t")
        buf.write("\3\t\3\t\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\21\3\21\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\23\3\23\3\24\3\24\3\25\3\25\3\26")
        buf.write("\3\26\3\27\3\27\3\27\3\27\3\30\3\30\3\31\3\31\3\32\3\32")
        buf.write("\3\32\3\32\3\33\3\33\3\33\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\36\3\36\3\37\3\37\3 \3 \3 \3 \3!\3!\3\"\3\"\3")
        buf.write("#\3#\3#\3#\3#\3#\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3%\3%\3")
        buf.write("&\3&\3\'\3\'\3(\3(\3)\3)\3)\3*\3*\3*\3+\3+\3+\3,\3,\3")
        buf.write("-\3-\3.\3.\3.\3.\3.\3.\3.\3.\3/\3/\3/\3\60\3\60\3\60\3")
        buf.write("\60\3\61\3\61\3\61\3\62\3\62\3\62\3\63\3\63\3\63\3\63")
        buf.write("\3\63\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\65\3\65\3\65")
        buf.write("\3\65\3\65\3\66\3\66\3\66\3\66\3\66\3\67\3\67\3\67\3\67")
        buf.write("\38\68\u016a\n8\r8\168\u016b\39\39\79\u0170\n9\f9\169")
        buf.write("\u0173\139\39\39\3:\3:\7:\u0179\n:\f:\16:\u017c\13:\3")
        buf.write(";\3;\7;\u0180\n;\f;\16;\u0183\13;\3<\6<\u0186\n<\r<\16")
        buf.write("<\u0187\3<\3<\2\2=\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n")
        buf.write("\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'")
        buf.write("\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ")
        buf.write("?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63e\64g")
        buf.write("\65i\66k\67m8o9q:s;u<w=\3\2\b\3\2\62;\5\2\f\f\17\17$$")
        buf.write("\4\2\f\f\17\17\5\2C\\aac|\6\2\62;C\\aac|\5\2\13\f\17\17")
        buf.write("\"\"\2\u018f\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3")
        buf.write("\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2")
        buf.write("\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2")
        buf.write("\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2")
        buf.write("#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2")
        buf.write("\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65")
        buf.write("\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2")
        buf.write("\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2")
        buf.write("\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2")
        buf.write("\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3")
        buf.write("\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e")
        buf.write("\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2k\3\2\2\2\2m\3\2\2\2\2")
        buf.write("o\3\2\2\2\2q\3\2\2\2\2s\3\2\2\2\2u\3\2\2\2\2w\3\2\2\2")
        buf.write("\3y\3\2\2\2\5{\3\2\2\2\7\177\3\2\2\2\t\u0084\3\2\2\2\13")
        buf.write("\u008d\3\2\2\2\r\u0095\3\2\2\2\17\u009a\3\2\2\2\21\u00ab")
        buf.write("\3\2\2\2\23\u00ae\3\2\2\2\25\u00b2\3\2\2\2\27\u00bb\3")
        buf.write("\2\2\2\31\u00c2\3\2\2\2\33\u00c7\3\2\2\2\35\u00cc\3\2")
        buf.write("\2\2\37\u00d3\3\2\2\2!\u00d8\3\2\2\2#\u00da\3\2\2\2%\u00df")
        buf.write("\3\2\2\2\'\u00e1\3\2\2\2)\u00e3\3\2\2\2+\u00e5\3\2\2\2")
        buf.write("-\u00e7\3\2\2\2/\u00eb\3\2\2\2\61\u00ed\3\2\2\2\63\u00ef")
        buf.write("\3\2\2\2\65\u00f3\3\2\2\2\67\u00f6\3\2\2\29\u00fd\3\2")
        buf.write("\2\2;\u0108\3\2\2\2=\u010a\3\2\2\2?\u010c\3\2\2\2A\u0110")
        buf.write("\3\2\2\2C\u0112\3\2\2\2E\u0114\3\2\2\2G\u011a\3\2\2\2")
        buf.write("I\u0124\3\2\2\2K\u0126\3\2\2\2M\u0128\3\2\2\2O\u012a\3")
        buf.write("\2\2\2Q\u012c\3\2\2\2S\u012f\3\2\2\2U\u0132\3\2\2\2W\u0135")
        buf.write("\3\2\2\2Y\u0137\3\2\2\2[\u0139\3\2\2\2]\u0141\3\2\2\2")
        buf.write("_\u0144\3\2\2\2a\u0148\3\2\2\2c\u014b\3\2\2\2e\u014e\3")
        buf.write("\2\2\2g\u0153\3\2\2\2i\u015a\3\2\2\2k\u015f\3\2\2\2m\u0164")
        buf.write("\3\2\2\2o\u0169\3\2\2\2q\u016d\3\2\2\2s\u0176\3\2\2\2")
        buf.write("u\u017d\3\2\2\2w\u0185\3\2\2\2yz\7=\2\2z\4\3\2\2\2{|\7")
        buf.write("u\2\2|}\7g\2\2}~\7v\2\2~\6\3\2\2\2\177\u0080\7u\2\2\u0080")
        buf.write("\u0081\7/\2\2\u0081\u0082\7q\2\2\u0082\u0083\7r\2\2\u0083")
        buf.write("\b\3\2\2\2\u0084\u0085\7u\2\2\u0085\u0086\7g\2\2\u0086")
        buf.write("\u0087\7n\2\2\u0087\u0088\7g\2\2\u0088\u0089\7e\2\2\u0089")
        buf.write("\u008a\7v\2\2\u008a\u008b\7q\2\2\u008b\u008c\7t\2\2\u008c")
        buf.write("\n\3\2\2\2\u008d\u008e\7g\2\2\u008e\u008f\7z\2\2\u008f")
        buf.write("\u0090\7c\2\2\u0090\u0091\7o\2\2\u0091\u0092\7r\2\2\u0092")
        buf.write("\u0093\7n\2\2\u0093\u0094\7g\2\2\u0094\f\3\2\2\2\u0095")
        buf.write("\u0096\7u\2\2\u0096\u0097\7j\2\2\u0097\u0098\7q\2\2\u0098")
        buf.write("\u0099\7y\2\2\u0099\16\3\2\2\2\u009a\u009b\7h\2\2\u009b")
        buf.write("\u009c\7w\2\2\u009c\u009d\7n\2\2\u009d\u009e\7n\2\2\u009e")
        buf.write("\u009f\7\"\2\2\u009f\u00a0\7u\2\2\u00a0\u00a1\7g\2\2\u00a1")
        buf.write("\u00a2\7s\2\2\u00a2\u00a3\7\"\2\2\u00a3\u00a4\7f\2\2\u00a4")
        buf.write("\u00a5\7k\2\2\u00a5\u00a6\7u\2\2\u00a6\u00a7\7r\2\2\u00a7")
        buf.write("\u00a8\7n\2\2\u00a8\u00a9\7c\2\2\u00a9\u00aa\7{\2\2\u00aa")
        buf.write("\20\3\2\2\2\u00ab\u00ac\7q\2\2\u00ac\u00ad\7p\2\2\u00ad")
        buf.write("\22\3\2\2\2\u00ae\u00af\7q\2\2\u00af\u00b0\7h\2\2\u00b0")
        buf.write("\u00b1\7h\2\2\u00b1\24\3\2\2\2\u00b2\u00b3\7g\2\2\u00b3")
        buf.write("\u00b4\7z\2\2\u00b4\u00b5\7c\2\2\u00b5\u00b6\7o\2\2\u00b6")
        buf.write("\u00b7\7r\2\2\u00b7\u00b8\7n\2\2\u00b8\u00b9\7g\2\2\u00b9")
        buf.write("\u00ba\7u\2\2\u00ba\26\3\2\2\2\u00bb\u00bc\7g\2\2\u00bc")
        buf.write("\u00bd\7z\2\2\u00bd\u00be\7k\2\2\u00be\u00bf\7v\2\2\u00bf")
        buf.write("\u00c0\7*\2\2\u00c0\u00c1\7+\2\2\u00c1\30\3\2\2\2\u00c2")
        buf.write("\u00c3\7g\2\2\u00c3\u00c4\7z\2\2\u00c4\u00c5\7k\2\2\u00c5")
        buf.write("\u00c6\7v\2\2\u00c6\32\3\2\2\2\u00c7\u00c8\7s\2\2\u00c8")
        buf.write("\u00c9\7w\2\2\u00c9\u00ca\7k\2\2\u00ca\u00cb\7v\2\2\u00cb")
        buf.write("\34\3\2\2\2\u00cc\u00cd\7s\2\2\u00cd\u00ce\7w\2\2\u00ce")
        buf.write("\u00cf\7k\2\2\u00cf\u00d0\7v\2\2\u00d0\u00d1\7*\2\2\u00d1")
        buf.write("\u00d2\7+\2\2\u00d2\36\3\2\2\2\u00d3\u00d4\7n\2\2\u00d4")
        buf.write("\u00d5\7q\2\2\u00d5\u00d6\7c\2\2\u00d6\u00d7\7f\2\2\u00d7")
        buf.write(" \3\2\2\2\u00d8\u00d9\7?\2\2\u00d9\"\3\2\2\2\u00da\u00db")
        buf.write("\7f\2\2\u00db\u00dc\7t\2\2\u00dc\u00dd\7c\2\2\u00dd\u00de")
        buf.write("\7y\2\2\u00de$\3\2\2\2\u00df\u00e0\7*\2\2\u00e0&\3\2\2")
        buf.write("\2\u00e1\u00e2\7.\2\2\u00e2(\3\2\2\2\u00e3\u00e4\7+\2")
        buf.write("\2\u00e4*\3\2\2\2\u00e5\u00e6\7<\2\2\u00e6,\3\2\2\2\u00e7")
        buf.write("\u00e8\7f\2\2\u00e8\u00e9\7g\2\2\u00e9\u00ea\7h\2\2\u00ea")
        buf.write(".\3\2\2\2\u00eb\u00ec\7}\2\2\u00ec\60\3\2\2\2\u00ed\u00ee")
        buf.write("\7\177\2\2\u00ee\62\3\2\2\2\u00ef\u00f0\7h\2\2\u00f0\u00f1")
        buf.write("\7q\2\2\u00f1\u00f2\7t\2\2\u00f2\64\3\2\2\2\u00f3\u00f4")
        buf.write("\7k\2\2\u00f4\u00f5\7p\2\2\u00f5\66\3\2\2\2\u00f6\u00f7")
        buf.write("\7t\2\2\u00f7\u00f8\7g\2\2\u00f8\u00f9\7v\2\2\u00f9\u00fa")
        buf.write("\7w\2\2\u00fa\u00fb\7t\2\2\u00fb\u00fc\7p\2\2\u00fc8\3")
        buf.write("\2\2\2\u00fd\u00fe\7c\2\2\u00fe\u00ff\7i\2\2\u00ff\u0100")
        buf.write("\7i\2\2\u0100\u0101\7t\2\2\u0101\u0102\7g\2\2\u0102\u0103")
        buf.write("\7i\2\2\u0103\u0104\7c\2\2\u0104\u0105\7v\2\2\u0105\u0106")
        buf.write("\7g\2\2\u0106\u0107\7*\2\2\u0107:\3\2\2\2\u0108\u0109")
        buf.write("\7]\2\2\u0109<\3\2\2\2\u010a\u010b\7_\2\2\u010b>\3\2\2")
        buf.write("\2\u010c\u010d\7p\2\2\u010d\u010e\7q\2\2\u010e\u010f\7")
        buf.write("v\2\2\u010f@\3\2\2\2\u0110\u0111\7/\2\2\u0111B\3\2\2\2")
        buf.write("\u0112\u0113\7-\2\2\u0113D\3\2\2\2\u0114\u0115\7t\2\2")
        buf.write("\u0115\u0116\7q\2\2\u0116\u0117\7w\2\2\u0117\u0118\7p")
        buf.write("\2\2\u0118\u0119\7f\2\2\u0119F\3\2\2\2\u011a\u011b\7k")
        buf.write("\2\2\u011b\u011c\7p\2\2\u011c\u011d\7f\2\2\u011d\u011e")
        buf.write("\7k\2\2\u011e\u011f\7e\2\2\u011f\u0120\7c\2\2\u0120\u0121")
        buf.write("\7v\2\2\u0121\u0122\7q\2\2\u0122\u0123\7t\2\2\u0123H\3")
        buf.write("\2\2\2\u0124\u0125\7`\2\2\u0125J\3\2\2\2\u0126\u0127\7")
        buf.write(",\2\2\u0127L\3\2\2\2\u0128\u0129\7\61\2\2\u0129N\3\2\2")
        buf.write("\2\u012a\u012b\7\'\2\2\u012bP\3\2\2\2\u012c\u012d\7?\2")
        buf.write("\2\u012d\u012e\7?\2\2\u012eR\3\2\2\2\u012f\u0130\7>\2")
        buf.write("\2\u0130\u0131\7?\2\2\u0131T\3\2\2\2\u0132\u0133\7@\2")
        buf.write("\2\u0133\u0134\7?\2\2\u0134V\3\2\2\2\u0135\u0136\7@\2")
        buf.write("\2\u0136X\3\2\2\2\u0137\u0138\7>\2\2\u0138Z\3\2\2\2\u0139")
        buf.write("\u013a\7u\2\2\u013a\u013b\7g\2\2\u013b\u013c\7n\2\2\u013c")
        buf.write("\u013d\7g\2\2\u013d\u013e\7e\2\2\u013e\u013f\7v\2\2\u013f")
        buf.write("\u0140\7*\2\2\u0140\\\3\2\2\2\u0141\u0142\7#\2\2\u0142")
        buf.write("\u0143\7?\2\2\u0143^\3\2\2\2\u0144\u0145\7c\2\2\u0145")
        buf.write("\u0146\7p\2\2\u0146\u0147\7f\2\2\u0147`\3\2\2\2\u0148")
        buf.write("\u0149\7q\2\2\u0149\u014a\7t\2\2\u014ab\3\2\2\2\u014b")
        buf.write("\u014c\7k\2\2\u014c\u014d\7h\2\2\u014dd\3\2\2\2\u014e")
        buf.write("\u014f\7g\2\2\u014f\u0150\7n\2\2\u0150\u0151\7u\2\2\u0151")
        buf.write("\u0152\7g\2\2\u0152f\3\2\2\2\u0153\u0154\7t\2\2\u0154")
        buf.write("\u0155\7c\2\2\u0155\u0156\7p\2\2\u0156\u0157\7i\2\2\u0157")
        buf.write("\u0158\7g\2\2\u0158\u0159\7*\2\2\u0159h\3\2\2\2\u015a")
        buf.write("\u015b\7|\2\2\u015b\u015c\7k\2\2\u015c\u015d\7r\2\2\u015d")
        buf.write("\u015e\7*\2\2\u015ej\3\2\2\2\u015f\u0160\7n\2\2\u0160")
        buf.write("\u0161\7g\2\2\u0161\u0162\7p\2\2\u0162\u0163\7*\2\2\u0163")
        buf.write("l\3\2\2\2\u0164\u0165\5o8\2\u0165\u0166\7\60\2\2\u0166")
        buf.write("\u0167\5o8\2\u0167n\3\2\2\2\u0168\u016a\t\2\2\2\u0169")
        buf.write("\u0168\3\2\2\2\u016a\u016b\3\2\2\2\u016b\u0169\3\2\2\2")
        buf.write("\u016b\u016c\3\2\2\2\u016cp\3\2\2\2\u016d\u0171\7$\2\2")
        buf.write("\u016e\u0170\n\3\2\2\u016f\u016e\3\2\2\2\u0170\u0173\3")
        buf.write("\2\2\2\u0171\u016f\3\2\2\2\u0171\u0172\3\2\2\2\u0172\u0174")
        buf.write("\3\2\2\2\u0173\u0171\3\2\2\2\u0174\u0175\7$\2\2\u0175")
        buf.write("r\3\2\2\2\u0176\u017a\7%\2\2\u0177\u0179\n\4\2\2\u0178")
        buf.write("\u0177\3\2\2\2\u0179\u017c\3\2\2\2\u017a\u0178\3\2\2\2")
        buf.write("\u017a\u017b\3\2\2\2\u017bt\3\2\2\2\u017c\u017a\3\2\2")
        buf.write("\2\u017d\u0181\t\5\2\2\u017e\u0180\t\6\2\2\u017f\u017e")
        buf.write("\3\2\2\2\u0180\u0183\3\2\2\2\u0181\u017f\3\2\2\2\u0181")
        buf.write("\u0182\3\2\2\2\u0182v\3\2\2\2\u0183\u0181\3\2\2\2\u0184")
        buf.write("\u0186\t\7\2\2\u0185\u0184\3\2\2\2\u0186\u0187\3\2\2\2")
        buf.write("\u0187\u0185\3\2\2\2\u0187\u0188\3\2\2\2\u0188\u0189\3")
        buf.write("\2\2\2\u0189\u018a\b<\2\2\u018ax\3\2\2\2\b\2\u016b\u0171")
        buf.write("\u017a\u0181\u0187\3\b\2\2")
        return buf.getvalue()


class RASPLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    T__43 = 44
    T__44 = 45
    T__45 = 46
    T__46 = 47
    T__47 = 48
    T__48 = 49
    T__49 = 50
    T__50 = 51
    T__51 = 52
    T__52 = 53
    Float = 54
    PosInt = 55
    String = 56
    Comment = 57
    ID = 58
    WS = 59

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'set'", "'s-op'", "'selector'", "'example'", "'show'", 
            "'full seq display'", "'on'", "'off'", "'examples'", "'exit()'", 
            "'exit'", "'quit'", "'quit()'", "'load'", "'='", "'draw'", "'('", 
            "','", "')'", "':'", "'def'", "'{'", "'}'", "'for'", "'in'", 
            "'return'", "'aggregate('", "'['", "']'", "'not'", "'-'", "'+'", 
            "'round'", "'indicator'", "'^'", "'*'", "'/'", "'%'", "'=='", 
            "'<='", "'>='", "'>'", "'<'", "'select('", "'!='", "'and'", 
            "'or'", "'if'", "'else'", "'range('", "'zip('", "'len('" ]

    symbolicNames = [ "<INVALID>",
            "Float", "PosInt", "String", "Comment", "ID", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "T__40", "T__41", "T__42", "T__43", 
                  "T__44", "T__45", "T__46", "T__47", "T__48", "T__49", 
                  "T__50", "T__51", "T__52", "Float", "PosInt", "String", 
                  "Comment", "ID", "WS" ]

    grammarFileName = "RASP.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


